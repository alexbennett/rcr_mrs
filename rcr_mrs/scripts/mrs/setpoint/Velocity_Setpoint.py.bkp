#!/usr/bin/env python

import rospy
import threading
import time
import mavros
import utm

from math import *
from mavros.utils import *
from std_msgs.msg import *
from tf.transformations import quaternion_from_euler
from mavros_msgs.msg import PositionTarget

class Velocity_Setpoint:
    def __init__(self, vehicle):
        # Store vehicle for reference
        self._vehicle = vehicle

        # Create target coordinate variable
        self._target_vel = (0, 0, 0)

        # Create publisher to local position
        self._raw_pub = rospy.Publisher('/mavros/setpoint_raw/local', PositionTarget, queue_size=10)

        # Setup rate
        self._rate = rospy.Rate(10)

        # Setup navigation status
        self._done = threading.Event()

    def hold(self, delay):
        # Set all velocities to 0
        self.set(0, 0, 0, delay)

    def set(self, vel_x, vel_y, vel_z, delay):
        # Set velocity
        self._target_vel = (vel_x, vel_y, vel_z)
        print self._target_vel
        self.spawn_update_thread()

        time.sleep(delay)

        self.terminate()


    def spawn_update_thread(self):
        # Reset update status
        self._done.clear()

        # Spawn threads
        try:
            # Create thread
            self._update_thread = threading.Thread(target=self.update_velocity, args=())

            # Start thread
            self._update_thread.start()

            # Allow thread to start
            time.sleep(1)
        except:
            fault("Error: Unable to start thread")

    def update_velocity(self):
        # Create PoseStamped message
        msg = PositionTarget(
             header = Header(
                frame_id="base_footprint",
                stamp=rospy.Time.now()
            ),
        )

        print 'Starting velocity update...'

        # Navigate until location is reached
        while not self._done.is_set():
            # Setup message
            msg.type_mask = PositionTarget.IGNORE_PX | PositionTarget.IGNORE_PY | PositionTarget.IGNORE_PZ | PositionTarget.IGNORE_AFX | PositionTarget.IGNORE_AFY | PositionTarget.IGNORE_AFZ | PositionTarget.FORCE | PositionTarget.IGNORE_YAW | PositionTarget.IGNORE_YAW_RATE

            msg.velocity.x = self._target_vel[0]
            msg.velocity.y = self._target_vel[1]
            msg.velocity.z = self._target_vel[2]

            # Publish
            self._raw_pub.publish(msg)

            # Ensure proper communication rate
            self._rate.sleep()

    def terminate(self):
        # Terminate the thread by setting the done event
        self._done.set()
